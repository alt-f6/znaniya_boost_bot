import os
import asyncio
from pathlib import Path
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.cron import CronTrigger

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import Column, Integer, String, DateTime, select, delete, update

# ------------------ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ------------------
env_path = Path(__file__).resolve().parent.parent / "config" / ".env"
load_dotenv(dotenv_path=env_path, override=True)

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# ------------------ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ------------------
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# ------------------ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ------------------
Base = declarative_base()

class Task(Base):
    __tablename__ = 'tasks'
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, index=True, nullable=False)
    description = Column(String, nullable=False)
    scheduled_time = Column(DateTime, nullable=False)

engine = create_async_engine(DATABASE_URL, echo=False)
async_session = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)

async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

async def add_task_db(user_id: int, description: str, scheduled_time: datetime):
    async with async_session() as session:
        new_task = Task(user_id=user_id, description=description, scheduled_time=scheduled_time)
        session.add(new_task)
        await session.commit()

async def get_tasks_db(user_id: int):
    async with async_session() as session:
        result = await session.execute(select(Task).where(Task.user_id == user_id))
        tasks = result.scalars().all()
        return tasks

async def delete_task_db(task_id: int):
    async with async_session() as session:
        stmt = delete(Task).where(Task.id == task_id)
        await session.execute(stmt)
        await session.commit()

async def update_task_db(task_id: int, new_description: str):
    async with async_session() as session:
        stmt = update(Task).where(Task.id == task_id).values(description=new_description)
        await session.execute(stmt)
        await session.commit()

# ------------------ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ------------------
async def send_reminder(user_id: int, task_description: str):
    try:
        await bot.send_message(chat_id=user_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task_description}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# ------------------ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ ------------------
class AddTaskState(StatesGroup):
    waiting_for_details = State()  # –æ–∂–∏–¥–∞–µ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏

# ------------------ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞) ------------------
def main_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="menu_add_task")],
        [InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏", callback_data="menu_view_tasks")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")]
    ])
    return keyboard

# ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ------------------
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ó–Ω–∞–Ω–∏—èBoost. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )

# ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ CallbackQuery –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ------------------
@dp.callback_query(lambda c: c.data == "menu_add_task")
async def menu_add_task_handler(callback: CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞—á–∏
    await state.set_state(AddTaskState.waiting_for_details)
    await callback.message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏> <YYYY-MM-DD HH:MM>")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "menu_view_tasks")
async def menu_view_tasks_handler(callback: CallbackQuery):
    tasks = await get_tasks_db(callback.from_user.id)
    if not tasks:
        await callback.message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
    else:
        for idx, task in enumerate(tasks, 1):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{task.id}")],
                [InlineKeyboardButton(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{task.id}")]
            ])
            await callback.message.answer(
                f"üìå {idx}. {task.description}\n‚è≥ {task.scheduled_time.strftime('%Y-%m-%d %H:%M')}",
                reply_markup=keyboard
            )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "menu_help")
async def menu_help_handler(callback: CallbackQuery):
    help_text = (
        "üìñ *–°–ø—Ä–∞–≤–∫–∞*\n\n"
        "‚ûï *–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É*: –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "   `<–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏> <YYYY-MM-DD HH:MM>`\n\n"
        "üìã *–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏*: –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.\n\n"
        "–ü—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–¥–∞—á –¥–æ—Å—Ç—É–ø–Ω—ã –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
    )
    await callback.message.answer(help_text, parse_mode="Markdown")
    await callback.answer()

# ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ (FSM) ------------------
@dp.message(AddTaskState.waiting_for_details)
async def process_task_details(message: types.Message, state: FSMContext):
    # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: <–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏> <YYYY-MM-DD HH:MM>
    parts = message.text.rsplit(maxsplit=2)
    if len(parts) < 2:
        await message.answer("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:\n<–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏> <YYYY-MM-DD HH:MM>")
        return
    # –ï—Å–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–µ–ª—ã, —Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    datetime_str = " ".join(parts[-2:])
    description = message.text[:-len(datetime_str)].strip()
    try:
        scheduled_time = datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è: YYYY-MM-DD HH:MM")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
    await add_task_db(message.from_user.id, description, scheduled_time)

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
    if scheduled_time > datetime.now():
        scheduler.add_job(
            send_reminder,
            DateTrigger(run_date=scheduled_time),
            args=[message.from_user.id, description],
            misfire_grace_time=60
        )
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ '{description}' –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {datetime_str}.")
    else:
        await message.answer("‚è≥ –í—Ä–µ–º—è –∑–∞–¥–∞—á–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ. –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
    
    await state.clear()

# ------------------ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ CallbackQuery –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ ------------------
@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def confirm_delete(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{task_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])
    await callback.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("confirm_delete_"))
async def delete_task_callback(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[2])
    await delete_task_db(task_id)
    await callback.message.edit_text("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")
    await callback.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")

@dp.callback_query(lambda c: c.data == "cancel")
async def cancel_callback(callback: CallbackQuery):
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer("–û—Ç–º–µ–Ω–∞.")

@dp.callback_query(lambda c: c.data.startswith("edit_"))
async def edit_task_callback(callback: CallbackQuery, state: FSMContext):
    task_id = int(callback.data.split("_")[1])
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(edit_task_id=task_id)
    await callback.message.answer("‚úè –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await callback.answer()

@dp.message(lambda message: True, AddTaskState.waiting_for_details)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def process_new_description(message: types.Message, state: FSMContext):
    data = await state.get_data()
    task_id = data.get("edit_task_id")
    if task_id:
        await update_task_db(task_id, message.text)
        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        await state.clear()
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –¥—Ä—É–≥–æ–º —Ö—ç–Ω–¥–ª–µ—Ä–µ (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏)

# ------------------ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ------------------
async def main():
    await init_db()
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
